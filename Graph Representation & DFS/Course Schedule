///// _Malak_A7med_ /////
#include <bits/stdc++.h>
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(), v.rend()
#define MalakA7med ios_base::sync_with_stdio(false);cin.tie(nullptr); cout.tie(nullptr);
#define ll long long
#define pb push_back
#define el "\n"
using namespace std;
int n, m;
vector<int> vis;
vector<int> ans;
vector<vector<int>> adj;
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};
bool cyc = false;
void dfs(int u) {
    // Acyclic Directed Graph
    vis[u] = 1;
    for (auto v : adj[u]) {
        if (!vis[v]) {
            dfs(v);
        }
        else if (vis[v] == 1) {
            cyc = true;
        }
    }
    vis[u] = 2;
    ans.pb(u);
}

void DebugOrDie() {
    cin >> n >> m;
    cyc = false;
    vis.assign(n + 1, 0);
    adj.assign(n + 1, {});
    for (int i=0; i<m; i++) {
        int u, v; cin >> u >> v;
        adj[u].pb(v);
    }

    for (int i = 1; i <= n; i++) {
        if (vis[i] == 0) dfs(i);
    }

    if (cyc) {
        cout << "IMPOSSIBLE" << el;
    } else {
        reverse(all(ans));
        for (auto x : ans) cout << x << " ";
        cout << el;
    }


}
// impossible >> if it's cyclic

int main() {
    MalakA7med
    int t = 1; // cin >> t;
    while (t--) {
        DebugOrDie();
    }
    return 0;
}

// https://vjudge.net/contest/749601#problem/J
