///// _Malak_A7med_ /////
#include <iostream>
#define ll long long
#define Malak ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
#define all(v) v.begin(),v.end()
#define el "\n"
using namespace std;

void min_heapify(int arr[], int size, int node) { //node = the idx of this child's parent
	int left_ch = 2 * node + 1;
	int right_ch = 2 * node + 2;
	int min = node;
	if (left_ch < size && arr[left_ch] < arr[min])
		min = left_ch;

	if (right_ch < size && arr[right_ch] < arr[min])
		min = right_ch;

	if (min != node) {
		swap(arr[node], arr[min]);
		min_heapify(arr, size, min);
	}
}

void build_heap(int arr[], int s) { //build the Min Heap
	for (int i = s / 2 - 1; i >= 0; i--) //start from the last parent >> s/2 - 1
		min_heapify(arr, s, i);
}

void heapsort(int arr[], int s) {
	build_heap(arr, s);
	for (int i = s - 1; i >= 1; i--) {
		swap(arr[0], arr[i]);  // swap the root(the smallest) with the last element in the current heap
		s--; //minimize the heap cuz we got the last element
		min_heapify(arr, s, 0);
	}
}

int main() {
	cout << "Enter the size of the array : ";
	int n; cin >> n;
	int* arr = new int[n];
	cout << "Enter the numbers to sort : ";
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	heapsort(arr, n);
	for (int i = 0; i < n; i++) {
		cout << arr[i] << " ";
	}
	cout << el;
	delete[] arr;
}

//Time Complexity  >>>> O(nlogn)
